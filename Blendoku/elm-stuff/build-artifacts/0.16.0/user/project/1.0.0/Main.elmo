Elm.Main = Elm.Main || {};
Elm.Main.make = function (_elm) {
   "use strict";
   _elm.Main = _elm.Main || {};
   if (_elm.Main.values) return _elm.Main.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Array = Elm.Array.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $BlendokuTiles = Elm.BlendokuTiles.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $GameBoard = Elm.GameBoard.make(_elm),
   $GameUI = Elm.GameUI.make(_elm),
   $GlobalVars = Elm.GlobalVars.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $Levels = Elm.Levels.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Mouse = Elm.Mouse.make(_elm),
   $Random = Elm.Random.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Spacing = Elm.Spacing.make(_elm),
   $Svg = Elm.Svg.make(_elm),
   $Svg$Attributes = Elm.Svg.Attributes.make(_elm),
   $Time = Elm.Time.make(_elm),
   $Window = Elm.Window.make(_elm);
   var _op = {};
   var genRLevel = function (s) {    var gen = A2($Random.$int,0,189);return A2($Random.generate,gen,s);};
   var setTiles = F3(function (ss,ts,gbs) {
      var tiles = A2($List.map,function (i) {    return A2($BlendokuTiles.getTile,i,ts);},ss);
      var bsp = A2($List.map,function (i) {    return A2($GameBoard.getBSP,i,gbs);},ss);
      var bPos = A2($List.map,function (b) {    return {ctor: "_Tuple2",_0: $GlobalVars.getCenterPos(b.pos),_1: b.index};},bsp);
      var tiles$ = A3($List.map2,
      F2(function (t,_p0) {    var _p1 = _p0;var _p2 = _p1._0;return _U.update(t,{pos: _p2,originPos: _p2,status: $BlendokuTiles.Set(_p1._1)});}),
      tiles,
      bPos);
      var bsp$ = A3($List.map2,F2(function (b,t) {    return _U.update(b,{status: $GameBoard.Set(t.index)});}),bsp,tiles$);
      var tt = A3($List.foldl,F2(function (a,b) {    return A2($BlendokuTiles.updateTiles,a,b);}),ts,tiles$);
      var bb = A3($List.foldl,F2(function (a,b) {    return A2($GameBoard.updateBSP,a,b);}),gbs,bsp$);
      return {ctor: "_Tuple2",_0: tt,_1: bb};
   });
   var drawGameBoard = F2(function (_p4,_p3) {
      var _p5 = _p4;
      var _p7 = _p5._0;
      var _p6 = _p3;
      return A2($Html.div,
      _U.list([]),
      _U.list([A2($Svg.svg,
      _U.list([$Svg$Attributes.width($Basics.toString(_p7)),$Svg$Attributes.height($Basics.toString(500))]),
      A2($List.append,
      A2($List.map,$GameBoard.boardImage,_p6._1),
      A2($List.map,function (b) {    return A2($BlendokuTiles.tileImage,{ctor: "_Tuple2",_0: _p7,_1: _p5._1},b);},_p6._0)))]));
   });
   var respaceBoard = F3(function (dimens,lvl,board) {
      var spaceB = A2($Levels.getBoardPos,lvl,dimens);
      return A3($List.map2,F2(function (p,b) {    return _U.update(b,{pos: p});}),spaceB,board);
   });
   var unwrapJust = function (a) {
      var _p8 = a;
      if (_p8.ctor === "Just") {
            return _p8._0;
         } else {
            return _U.crashCase("Main",{start: {line: 243,column: 5},end: {line: 245,column: 57}},_p8)("unwrapJust: got Nothing");
         }
   };
   var rtHelper = F3(function (tiles,coords,gb) {
      var _p10 = tiles;
      if (_p10.ctor === "[]") {
            return _U.list([]);
         } else {
            var _p13 = _p10._1;
            var _p12 = _p10._0;
            var _p11 = _p12.status;
            switch (_p11.ctor)
            {case "NotPlaced": var newOrigin = unwrapJust(A2($Array.get,$Basics.round(_p12.randI),coords));
                 return A2($List._op["::"],_U.update(_p12,{pos: newOrigin,originPos: newOrigin}),A3(rtHelper,_p13,coords,gb));
               case "Placed": var newOrigin = unwrapJust(A2($Array.get,$Basics.round(_p12.randI),coords));
                 var g = unwrapJust(A2($Array.get,_p11._0,gb));
                 var newPos = $GlobalVars.getCenterPos(g.pos);
                 return A2($List._op["::"],_U.update(_p12,{pos: newPos,originPos: newOrigin}),A3(rtHelper,_p13,coords,gb));
               default: var g = unwrapJust(A2($Array.get,_p11._0,gb));
                 var center = $GlobalVars.getCenterPos(g.pos);
                 return A2($List._op["::"],_U.update(_p12,{pos: center,originPos: center}),A3(rtHelper,_p13,coords,gb));}
         }
   });
   var respaceTiles = F3(function (dimens,gb,t) {
      var numTiles = $List.length(t);
      var newCoords = $Array.fromList(A3($Spacing.newSpaceTiles,dimens,numTiles,$GlobalVars.colWidth));
      var gb$ = $Array.fromList(gb);
      return A3(rtHelper,t,newCoords,gb$);
   });
   var resetBoard = F2(function (tiles,gb) {
      var setTiles = A2($List.filterMap,$BlendokuTiles.isSet2,tiles);
      var setTiles$ = A2($List.filter,$BlendokuTiles.isSet,tiles);
      var setBSP = A2($List.map,function (_p14) {    var _p15 = _p14;return A2($GameBoard.getBSP,_p15._0,gb);},setTiles);
      var resetB = $GameBoard.resetBoard(gb);
      var resetT = A2($List.map,function (t) {    return _U.update(t,{pos: t.originPos,status: $BlendokuTiles.NotPlaced});},tiles);
      var resetT$ = A3($List.foldl,F2(function (a,b) {    return A2($BlendokuTiles.updateTiles,a,b);}),resetT,setTiles$);
      var resetB$ = A3($List.foldl,F2(function (a,b) {    return A2($GameBoard.updateBSP,a,b);}),resetB,setBSP);
      return {ctor: "_Tuple2",_0: resetT$,_1: resetB$};
   });
   var snap = F3(function (_p16,tileIndex,bb) {
      var _p17 = _p16;
      var _p25 = _p17._1;
      var _p24 = _p17._0;
      var _p18 = bb;
      if (_p18.ctor === "[]") {
            return {ctor: "_Tuple3",_0: {ctor: "_Tuple2",_0: _p24,_1: _p25},_1: _U.list([]),_2: $BlendokuTiles.NotPlaced};
         } else {
            var _p23 = _p18._1;
            var _p22 = _p18._0;
            var _p19 = $GameBoard.extractBSP(_p22);
            var x$ = _p19._0;
            var y$ = _p19._1;
            var status = _p19._2;
            var adjX = x$ - ($GlobalVars.tileSideLen / 3 | 0);
            var adjY = y$ - ($GlobalVars.tileSideLen / 3 | 0);
            var deltaX = $Basics.toFloat(Math.pow(_p24 - adjX,2));
            var deltaY = $Basics.toFloat(Math.pow(_p25 - adjY,2));
            var dist = $Basics.sqrt(deltaX + deltaY);
            var ifUpdate = {ctor: "_Tuple3"
                           ,_0: {ctor: "_Tuple2",_0: adjX,_1: adjY}
                           ,_1: A2($List._op["::"],_U.update(_p22,{status: $GameBoard.Occupied(tileIndex)}),_p23)
                           ,_2: $BlendokuTiles.Placed(_p22.index)};
            var _p20 = {ctor: "_Tuple2",_0: _p22.status,_1: _U.cmp(dist,40) < 0};
            _v9_2: do {
               if (_p20.ctor === "_Tuple2" && _p20._1 === true) {
                     switch (_p20._0.ctor)
                     {case "Occupied": return ifUpdate;
                        case "Empty": return ifUpdate;
                        default: break _v9_2;}
                  } else {
                     break _v9_2;
                  }
            } while (false);
            var _p21 = A3(snap,{ctor: "_Tuple2",_0: _p24,_1: _p25},tileIndex,_p23);
            var pos = _p21._0;
            var board = _p21._1;
            var status = _p21._2;
            return {ctor: "_Tuple3",_0: pos,_1: A2($List._op["::"],_p22,board),_2: status};
         }
   });
   var moveTile = F2(function (_p27,_p26) {
      var _p28 = _p27;
      var _p41 = _p28._1;
      var _p40 = _p28._0;
      var _p29 = _p26;
      var _p39 = _p29._2;
      var _p38 = _p29._3;
      var _p37 = _p29._1;
      var _p30 = _p29._0;
      if (_p30.ctor === "[]") {
            return {ctor: "_Tuple4",_0: _U.list([]),_1: _p37,_2: _p39,_3: _p38};
         } else {
            var _p36 = _p30._1;
            var _p35 = _p30._0;
            var _p31 = {ctor: "_Tuple3",_0: _U.eq(_p35.index,_p40),_1: _p41,_2: _p35.status};
            _v13_3: do {
               _v13_1: do {
                  if (_p31.ctor === "_Tuple3" && _p31._0 === true) {
                        switch (_p31._2.ctor)
                        {case "Set": var _p32 = A2(moveTile,{ctor: "_Tuple2",_0: _p40,_1: _p41},{ctor: "_Tuple4",_0: _p36,_1: _p37,_2: _p39,_3: _p38});
                             var tiles = _p32._0;
                             var board = _p32._1;
                             var st = _p32._2;
                             var l = _p32._3;
                             return {ctor: "_Tuple4",_0: A2($List._op["::"],_p35,tiles),_1: board,_2: st,_3: l};
                           case "NotPlaced": switch (_p31._1.ctor)
                             {case "Drag": if (_p31._1._0.ctor === "_Tuple2") {
                                        break _v13_1;
                                     } else {
                                        break _v13_3;
                                     }
                                case "Rest": return {ctor: "_Tuple4"
                                                    ,_0: A2($List._op["::"],_U.update(_p35,{pos: _p35.originPos}),_p36)
                                                    ,_1: A2($GameBoard.cleanBoard,_p35.index,_p37)
                                                    ,_2: _p39
                                                    ,_3: _p38};
                                default: break _v13_3;}
                           default: if (_p31._1.ctor === "Drag" && _p31._1._0.ctor === "_Tuple2") {
                                   break _v13_1;
                                } else {
                                   break _v13_3;
                                }}
                     } else {
                        var _p34 = A2(moveTile,{ctor: "_Tuple2",_0: _p40,_1: _p41},{ctor: "_Tuple4",_0: _p36,_1: _p37,_2: _p39,_3: _p38});
                        var tiles = _p34._0;
                        var board = _p34._1;
                        var st = _p34._2;
                        var l = _p34._3;
                        return {ctor: "_Tuple4",_0: A2($List._op["::"],_p35,tiles),_1: board,_2: st,_3: l};
                     }
               } while (false);
               var x$ = _p31._1._0._0 - ($GlobalVars.tileSideLen / 2 | 0);
               var y$ = _p31._1._0._1 - ($GlobalVars.tileSideLen / 2 | 0);
               var _p33 = A3(snap,{ctor: "_Tuple2",_0: x$,_1: y$},_p40,_p37);
               var snapx = _p33._0._0;
               var snapy = _p33._0._1;
               var newBoard = _p33._1;
               var newSt = _p33._2;
               return {ctor: "_Tuple4"
                      ,_0: A2($List._op["::"],_U.update(_p35,{pos: {ctor: "_Tuple2",_0: snapx,_1: snapy},status: newSt}),_p36)
                      ,_1: newBoard
                      ,_2: _p39
                      ,_3: _p38};
            } while (false);
            return {ctor: "_Tuple4",_0: A2($List._op["::"],_p35,_p36),_1: _p37,_2: _p39,_3: _p38};
         }
   });
   var extractLevel = function (_p42) {    var _p43 = _p42;return _p43._3;};
   var extractState = function (_p44) {    var _p45 = _p44;return {ctor: "_Tuple4",_0: _p45._0,_1: _p45._1,_2: _p45._2,_3: _p45._3};};
   var view = F2(function (st,windowDim) {
      var _p46 = extractState(st);
      var tiles = _p46._0;
      var board = _p46._1;
      var status = _p46._2;
      var l = _p46._3;
      var _p47 = status;
      switch (_p47.ctor)
      {case "UnSeeded": return A2($Html.div,_U.list([]),_U.list([$GameUI.newGameButton]));
         case "Playing": return A2($Html.div,_U.list([]),_U.list([A2(drawGameBoard,windowDim,st),$GameUI.buttonGroup]));
         default: return A2($Html.div,
           _U.list([]),
           _U.list([A2($Html.div,
                   _U.list([$Html$Attributes.$class("win-wrapper")]),
                   _U.list([A2($Html.div,_U.list([$Html$Attributes.$class("winner")]),_U.list([$Html.text("You Win!")]))]))
                   ,A2(drawGameBoard,windowDim,st)
                   ,$GameUI.buttonGroup]));}
   });
   var buttonMailbox = $GameUI.uiMailbox;
   var tileMailbox = $BlendokuTiles.tileMailbox;
   var Swap = function (a) {    return {ctor: "Swap",_0: a};};
   var Snap = function (a) {    return {ctor: "Snap",_0: a};};
   var Wnd = function (a) {    return {ctor: "Wnd",_0: a};};
   var Btn = function (a) {    return {ctor: "Btn",_0: a};};
   var buttonSignals = A4($Signal.map3,
   F3(function (sig,time,dims) {
      var _p48 = sig;
      if (_p48.ctor === "NeedTime") {
            return Btn($GameUI.NewGame({ctor: "_Tuple2",_0: time,_1: dims}));
         } else {
            return Btn(sig);
         }
   }),
   buttonMailbox.signal,
   A2($Signal.sampleOn,buttonMailbox.signal,$Time.every($Time.millisecond)),
   A2($Signal.sampleOn,buttonMailbox.signal,$Window.dimensions));
   var Mv = function (a) {    return {ctor: "Mv",_0: a};};
   var mousePosSignal = A3($Signal.map2,
   F2(function (_p49,mousePos) {
      var _p50 = _p49;
      var _p53 = _p50._1;
      var _p52 = _p50._0;
      var _p51 = _p53;
      if (_p51.ctor === "Selected") {
            return Mv({ctor: "_Tuple2",_0: _p52,_1: $BlendokuTiles.Drag(mousePos)});
         } else {
            return Mv({ctor: "_Tuple2",_0: _p52,_1: _p53});
         }
   }),
   tileMailbox.signal,
   $Mouse.position);
   var gameSignals = A2($Signal.merge,mousePosSignal,A2($Signal.merge,buttonSignals,A2($Signal.map,Wnd,$Window.dimensions)));
   var UnSeeded = {ctor: "UnSeeded"};
   var initState = {ctor: "_Tuple4",_0: _U.list([]),_1: _U.list([]),_2: UnSeeded,_3: $Maybe.Nothing};
   var Win = {ctor: "Win"};
   var Playing = {ctor: "Playing"};
   var checkGame = F2(function (prev,g) {
      checkGame: while (true) {
         var _p54 = g;
         if (_p54.ctor === "[]") {
               return Win;
            } else {
               var _p58 = _p54._1;
               var _p55 = $GameBoard.extractBSP(_p54._0);
               var x = _p55._0;
               var y = _p55._1;
               var st = _p55._2;
               var _p56 = st;
               switch (_p56.ctor)
               {case "Empty": return Playing;
                  case "Occupied": var _p57 = _p56._0;
                    if (!_U.eq(_p57,prev + 1)) return Playing; else {
                          var _v22 = _p57,_v23 = _p58;
                          prev = _v22;
                          g = _v23;
                          continue checkGame;
                       }
                  default: var _v24 = _p56._0,_v25 = _p58;
                    prev = _v24;
                    g = _v25;
                    continue checkGame;}
            }
      }
   });
   var checkWin = function (_p59) {
      var _p60 = _p59;
      var _p64 = _p60._0;
      var _p63 = _p60._3;
      var _p62 = _p60._1;
      var _p61 = _p64;
      if (_p61.ctor === "[]") {
            return {ctor: "_Tuple4",_0: _p64,_1: _p62,_2: _p60._2,_3: _p63};
         } else {
            var w = A2(checkGame,-1,_p62);
            return {ctor: "_Tuple4",_0: _p64,_1: _p62,_2: w,_3: _p63};
         }
   };
   var generateGameLevels = function (_p65) {
      var _p66 = _p65;
      var _p70 = _p66._1._0;
      var _p67 = genRLevel($Random.initialSeed($Basics.round(_p66._0)));
      var lvl = _p67._0;
      var s = _p67._1;
      var l$ = A2($Basics._op["%"],lvl,6) + 1;
      var _p68 = $Levels.getLevel(l$);
      var bf = _p68._0;
      var tl = _p68._1;
      var ts = _p68._2;
      var tiles = A2(tl,{ctor: "_Tuple2",_0: _p70,_1: 550},s);
      var board = bf({ctor: "_Tuple2",_0: _p70,_1: 550});
      var _p69 = A3(setTiles,ts,tiles,board);
      var t$ = _p69._0;
      var b$ = _p69._1;
      return {ctor: "_Tuple4",_0: t$,_1: b$,_2: Playing,_3: $Maybe.Just(l$)};
   };
   var buttonUpdate = F2(function (sig,_p71) {
      var _p72 = _p71;
      var _p77 = _p72._0;
      var _p76 = _p72._3;
      var _p75 = _p72._1;
      var sigStr = $Basics.toString(sig);
      var _p73 = sig;
      switch (_p73.ctor)
      {case "NewGame": return generateGameLevels(_p73._0);
         case "Reset": var _p74 = A2(resetBoard,_p77,_p75);
           var tiles$ = _p74._0;
           var board$ = _p74._1;
           return {ctor: "_Tuple4",_0: tiles$,_1: board$,_2: Playing,_3: _p76};
         default: return A2($Debug.log,sigStr,{ctor: "_Tuple4",_0: _p77,_1: _p75,_2: _p72._2,_3: _p76});}
   });
   var update = F2(function (e,st) {
      var _p78 = extractState(st);
      var tiles = _p78._0;
      var board = _p78._1;
      var gstate = _p78._2;
      var l = _p78._3;
      var lvl = A2($Maybe.withDefault,0,l);
      var _p79 = gstate;
      switch (_p79.ctor)
      {case "Win": var _p80 = e;
           switch (_p80.ctor)
           {case "Btn": return A2(buttonUpdate,_p80._0,st);
              case "Wnd": var _p81 = _p80._0;
                var newB = A3(respaceBoard,_p81,lvl,board);
                var newT = A3(respaceTiles,_p81,newB,tiles);
                return {ctor: "_Tuple4",_0: newT,_1: newB,_2: gstate,_3: l};
              default: return st;}
         case "Playing": var _p82 = e;
           switch (_p82.ctor)
           {case "Mv": var newState = A2(moveTile,{ctor: "_Tuple2",_0: _p82._0._0,_1: _p82._0._1},st);
                return checkWin(newState);
              case "Btn": return A2(buttonUpdate,_p82._0,st);
              default: var _p83 = _p82._0;
                var newB = A3(respaceBoard,_p83,lvl,board);
                var newT = A3(respaceTiles,_p83,newB,tiles);
                return {ctor: "_Tuple4",_0: newT,_1: newB,_2: gstate,_3: l};}
         default: var _p84 = e;
           if (_p84.ctor === "Btn") {
                 return A2(buttonUpdate,_p84._0,st);
              } else {
                 return st;
              }}
   });
   var main = A3($Signal.map2,view,A3($Signal.foldp,update,initState,gameSignals),$Window.dimensions);
   return _elm.Main.values = {_op: _op
                             ,Playing: Playing
                             ,Win: Win
                             ,UnSeeded: UnSeeded
                             ,Mv: Mv
                             ,Btn: Btn
                             ,Wnd: Wnd
                             ,Snap: Snap
                             ,Swap: Swap
                             ,tileMailbox: tileMailbox
                             ,buttonMailbox: buttonMailbox
                             ,extractState: extractState
                             ,extractLevel: extractLevel
                             ,mousePosSignal: mousePosSignal
                             ,buttonSignals: buttonSignals
                             ,gameSignals: gameSignals
                             ,snap: snap
                             ,checkGame: checkGame
                             ,checkWin: checkWin
                             ,moveTile: moveTile
                             ,resetBoard: resetBoard
                             ,buttonUpdate: buttonUpdate
                             ,update: update
                             ,unwrapJust: unwrapJust
                             ,rtHelper: rtHelper
                             ,respaceBoard: respaceBoard
                             ,respaceTiles: respaceTiles
                             ,drawGameBoard: drawGameBoard
                             ,view: view
                             ,initState: initState
                             ,setTiles: setTiles
                             ,genRLevel: genRLevel
                             ,generateGameLevels: generateGameLevels
                             ,main: main};
};