Elm.BoardLevels = Elm.BoardLevels || {};
Elm.BoardLevels.make = function (_elm) {
   "use strict";
   _elm.BoardLevels = _elm.BoardLevels || {};
   if (_elm.BoardLevels.values) return _elm.BoardLevels.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $GameBoard = Elm.GameBoard.make(_elm),
   $GlobalVars = Elm.GlobalVars.make(_elm),
   $Html = Elm.Html.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Svg = Elm.Svg.make(_elm),
   $Svg$Attributes = Elm.Svg.Attributes.make(_elm),
   $Window = Elm.Window.make(_elm);
   var _op = {};
   var bEq = F2(function (i,offset) {    return offset - (($GlobalVars.tileSideLen / 2 | 0) * i + $GlobalVars.tileSideLen * i);});
   var fEq = F2(function (i,offset) {    return ($GlobalVars.tileSideLen / 2 | 0) * i + $GlobalVars.tileSideLen * i + offset;});
   var level1Pos = F2(function (_p0,nTiles) {
      var _p1 = _p0;
      var midW = _p1._0 / 2 | 0;
      var midH = (_p1._1 / 2 | 0) + 50;
      var m = nTiles / 2 | 0;
      var latterPos = A2($List.map,function (i) {    return {ctor: "_Tuple2",_0: midW,_1: A2(fEq,i,midH)};},_U.range(1,m));
      var firstPos = A2($List.map,function (i) {    return {ctor: "_Tuple2",_0: midW,_1: A2(bEq,i,midH)};},_U.range(0,m));
      var ls = A2($List.append,$List.reverse(firstPos),latterPos);
      return A2($List.take,nTiles,ls);
   });
   var getPos = F2(function (n,ls) {
      getPos: while (true) {
         var _p2 = {ctor: "_Tuple2",_0: n,_1: ls};
         if (_p2._1.ctor === "::") {
               if (_p2._0 === 0) {
                     return _p2._1._0;
                  } else {
                     var _v2 = n - 1,_v3 = _p2._1._1;
                     n = _v2;
                     ls = _v3;
                     continue getPos;
                  }
            } else {
               return _U.crashCase("BoardLevels",{start: {line: 22,column: 5},end: {line: 25,column: 65}},_p2)("getPos: passing in invalid index");
            }
      }
   });
   var level2Pos = F2(function (_p4,nTile) {
      var _p5 = _p4;
      var midLine = A2(level1Pos,{ctor: "_Tuple2",_0: _p5._0,_1: _p5._1},nTile);
      var _p6 = A2(getPos,0,midLine);
      var x0 = _p6._0;
      var y0 = _p6._1;
      var left = A2($List.map,function (i) {    return {ctor: "_Tuple2",_0: A2(bEq,i,x0),_1: y0};},_U.list([2,1]));
      var right = A2($List.map,function (i) {    return {ctor: "_Tuple2",_0: A2(fEq,i,x0),_1: y0};},_U.list([1,2]));
      return A2($List.append,A2($List.append,left,midLine),right);
   });
   var level3Pos = F2(function (_p7,nTile) {
      var _p8 = _p7;
      var midLine = A2(level1Pos,{ctor: "_Tuple2",_0: _p8._0,_1: _p8._1},nTile);
      var _p9 = A2(getPos,3,midLine);
      var x0 = _p9._0;
      var y0 = _p9._1;
      var sEq = function (i) {    return ($GlobalVars.tileSideLen / 2 | 0) * i + $GlobalVars.tileSideLen * i + x0;};
      var sEq2 = function (i) {    return x0 - (($GlobalVars.tileSideLen / 2 | 0) * i + $GlobalVars.tileSideLen * i);};
      var left = A2($List.map,function (i) {    return {ctor: "_Tuple2",_0: A2(bEq,i,x0),_1: y0};},_U.list([2,1]));
      var right = A2($List.map,function (i) {    return {ctor: "_Tuple2",_0: A2(fEq,i,x0),_1: y0};},_U.list([1,2]));
      return A2($List.append,A2($List.append,left,midLine),right);
   });
   var level4Pos = F2(function (_p10,nTile) {
      var _p11 = _p10;
      var _p21 = _p11._0;
      var w1 = _p21 / 3 | 0;
      var verticalLine = A2(level1Pos,{ctor: "_Tuple2",_0: _p21,_1: _p11._1},nTile);
      var leftLine = A2($List.map,function (_p12) {    var _p13 = _p12;return {ctor: "_Tuple2",_0: w1,_1: _p13._1};},verticalLine);
      var _p14 = A2(getPos,0,leftLine);
      var x0 = _p14._0;
      var y0 = _p14._1;
      var sEq = function (i) {    return ($GlobalVars.tileSideLen / 2 | 0) * i + $GlobalVars.tileSideLen * i + x0;};
      var top = A2($List.map,function (i) {    return {ctor: "_Tuple2",_0: A2(fEq,i,x0),_1: y0};},_U.range(1,nTile - 1));
      var _p15 = A2(getPos,3,leftLine);
      var x3 = _p15._0;
      var y3 = _p15._1;
      var bottom = A2($List.map,function (_p16) {    var _p17 = _p16;return {ctor: "_Tuple2",_0: _p17._0,_1: y3};},top);
      var _p18 = A2(getPos,2,bottom);
      var xx3 = _p18._0;
      var yy3 = _p18._1;
      var rightLine = A2($List.map,function (_p19) {    var _p20 = _p19;return {ctor: "_Tuple2",_0: xx3,_1: _p20._1};},verticalLine);
      var rL = A2($List.take,2,A2($List.drop,1,rightLine));
      return A3($List.foldl,$List.append,rL,_U.list([top,bottom,leftLine]));
   });
   var level5Pos = F2(function (_p22,nTile) {
      var _p23 = _p22;
      var _p31 = _p23._0;
      var _p30 = _p23._1;
      var w1 = _p31 / 3 | 0;
      var vl1 = A2(level1Pos,{ctor: "_Tuple2",_0: _p31,_1: _p30},nTile);
      var vl2 = A2(level1Pos,{ctor: "_Tuple2",_0: _p31,_1: _p30},3);
      var vl3 = A2(level1Pos,{ctor: "_Tuple2",_0: _p31,_1: _p30},1);
      var ws = A2($List.map,function (i) {    return A2(fEq,i,w1);},_U.list([1,2,3]));
      var w0 = A2(getPos,0,ws);
      var w1 = A2(getPos,1,ws);
      var w2 = A2(getPos,2,ws);
      var v1 = A2($List.map,function (_p24) {    var _p25 = _p24;return {ctor: "_Tuple2",_0: w0,_1: _p25._1};},vl1);
      var v2 = A2($List.map,function (_p26) {    var _p27 = _p26;return {ctor: "_Tuple2",_0: w1,_1: _p27._1};},vl2);
      var v3 = A2($List.map,function (_p28) {    var _p29 = _p28;return {ctor: "_Tuple2",_0: w2,_1: _p29._1};},vl3);
      return A3($List.foldl,$List.append,v3,_U.list([v2,v1]));
   });
   var level6Pos = F2(function (_p32,nTile) {
      var _p33 = _p32;
      var _p39 = _p33._0;
      var w1 = _p39 / 3 | 0;
      var vl1 = A2($List.map,
      function (_p34) {
         var _p35 = _p34;
         return {ctor: "_Tuple2",_0: w1,_1: _p35._1};
      },
      A2(level1Pos,{ctor: "_Tuple2",_0: _p39,_1: _p33._1},nTile + 1));
      var _p36 = A2(getPos,0,vl1);
      var x0 = _p36._0;
      var y0 = _p36._1;
      var _p37 = A2(getPos,1,vl1);
      var x1 = _p37._0;
      var y1 = _p37._1;
      var _p38 = A2(getPos,2,vl1);
      var x2 = _p38._0;
      var y2 = _p38._1;
      var hz2 = A2($List.map,function (i) {    return {ctor: "_Tuple2",_0: A2(fEq,i,x2),_1: y2};},_U.list([1,2,3,4]));
      var hz1 = A2($List.map,function (i) {    return {ctor: "_Tuple2",_0: A2(fEq,i,x1),_1: y1};},_U.list([2,4]));
      var hz0 = A2($List.map,function (i) {    return {ctor: "_Tuple2",_0: A2(fEq,i,x0),_1: y0};},_U.list([2,3,4]));
      var vl = A2($List.drop,1,vl1);
      return A3($List.foldl,$List.append,hz0,_U.list([hz1,hz2,vl]));
   });
   var levelToBSP = F3(function (dimens,f,n) {
      var pos = A2(f,dimens,n);
      return A2($List.indexedMap,F2(function (i,p) {    return {index: i,pos: p,status: $GameBoard.Empty};}),pos);
   });
   var level1BSP = function (dims) {    return A3(levelToBSP,dims,level1Pos,6);};
   var drawGameBoard = function (_p40) {
      var _p41 = _p40;
      var _p43 = _p41._0;
      var _p42 = _p41._1;
      var board = level1BSP({ctor: "_Tuple2",_0: _p43,_1: _p42});
      return A2($Html.div,
      _U.list([]),
      _U.list([A2($Svg.svg,
      _U.list([$Svg$Attributes.width($Basics.toString(_p43)),$Svg$Attributes.height($Basics.toString(_p42))]),
      A2($List.map,$GameBoard.boardImage,board))]));
   };
   var main = A2($Signal.map,drawGameBoard,$Window.dimensions);
   var level2BSP = function (dimens) {    return A3(levelToBSP,dimens,level2Pos,5);};
   var level3BSP = function (dimens) {    return A3(levelToBSP,dimens,level3Pos,5);};
   var level4BSP = function (dimens) {    return A3(levelToBSP,dimens,level4Pos,4);};
   var level5BSP = function (dimens) {    return A3(levelToBSP,dimens,level5Pos,5);};
   var level6BSP = function (dimens) {    return A3(levelToBSP,dimens,level6Pos,4);};
   var getLevel = function (lvl) {
      var _p44 = lvl;
      switch (_p44)
      {case 1: return level1BSP;
         case 2: return level2BSP;
         case 3: return level3BSP;
         case 4: return level4BSP;
         case 5: return level5BSP;
         case 6: return level6BSP;
         default: return _U.crashCase("BoardLevels",{start: {line: 37,column: 5},end: {line: 44,column: 63}},_p44)("getLevel: invalid level, pick 1 - 6");}
   };
   return _elm.BoardLevels.values = {_op: _op
                                    ,levelToBSP: levelToBSP
                                    ,getPos: getPos
                                    ,fEq: fEq
                                    ,bEq: bEq
                                    ,getLevel: getLevel
                                    ,level1Pos: level1Pos
                                    ,level1BSP: level1BSP
                                    ,level2Pos: level2Pos
                                    ,level2BSP: level2BSP
                                    ,level3Pos: level3Pos
                                    ,level3BSP: level3BSP
                                    ,level4Pos: level4Pos
                                    ,level4BSP: level4BSP
                                    ,level5Pos: level5Pos
                                    ,level5BSP: level5BSP
                                    ,level6Pos: level6Pos
                                    ,level6BSP: level6BSP
                                    ,drawGameBoard: drawGameBoard
                                    ,main: main};
};