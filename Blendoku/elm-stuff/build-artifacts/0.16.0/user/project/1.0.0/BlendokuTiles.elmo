Elm.BlendokuTiles = Elm.BlendokuTiles || {};
Elm.BlendokuTiles.make = function (_elm) {
   "use strict";
   _elm.BlendokuTiles = _elm.BlendokuTiles || {};
   if (_elm.BlendokuTiles.values) return _elm.BlendokuTiles.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Color = Elm.Color.make(_elm),
   $ColorInterpolation = Elm.ColorInterpolation.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $GlobalVars = Elm.GlobalVars.make(_elm),
   $Html = Elm.Html.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Random = Elm.Random.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Spacing = Elm.Spacing.make(_elm),
   $Svg = Elm.Svg.make(_elm),
   $Svg$Attributes = Elm.Svg.Attributes.make(_elm),
   $Svg$Events = Elm.Svg.Events.make(_elm);
   var _op = {};
   var genRIndex = F2(function (n,s) {
      var floatList = function (n) {    return A2($Random.list,n,A2($Random.$float,0,5));};
      return A2($Random.generate,floatList(n),s);
   });
   var updateTiles = F2(function (t,tiles) {
      var _p0 = tiles;
      if (_p0.ctor === "[]") {
            return _U.crashCase("BlendokuTiles",{start: {line: 75,column: 5},end: {line: 79,column: 40}},_p0)("updateTile: tile does not exists!");
         } else {
            var _p3 = _p0._1;
            var _p2 = _p0._0;
            return _U.eq(t.index,_p2.index) ? A2($List._op["::"],t,_p3) : A2($List._op["::"],_p2,A2(updateTiles,t,_p3));
         }
   });
   var getTile = F2(function (index,tiles) {
      getTile: while (true) {
         var _p4 = tiles;
         if (_p4.ctor === "[]") {
               return _U.crashCase("BlendokuTiles",
               {start: {line: 68,column: 5},end: {line: 70,column: 66}},
               _p4)("getTile: looking for tile that doesn\'t exist!");
            } else {
               var _p6 = _p4._0;
               if (_U.eq(_p6.index,index)) return _p6; else {
                     var _v2 = index,_v3 = _p4._1;
                     index = _v2;
                     tiles = _v3;
                     continue getTile;
                  }
            }
      }
   });
   var makeTile = F6(function (i,r,p,op,c,s) {    return {index: i,randI: r,pos: p,originPos: op,color: c,status: s};});
   var isSet2 = function (t) {
      var _p7 = t.status;
      if (_p7.ctor === "Set") {
            return $Maybe.Just({ctor: "_Tuple2",_0: _p7._0,_1: t.index});
         } else {
            return $Maybe.Nothing;
         }
   };
   var isSet = function (t) {    var _p8 = t.status;if (_p8.ctor === "Set") {    return true;} else {    return false;}};
   var Tile = F6(function (a,b,c,d,e,f) {    return {index: a,randI: b,pos: c,originPos: d,color: e,status: f};});
   var Set = function (a) {    return {ctor: "Set",_0: a};};
   var NotPlaced = {ctor: "NotPlaced"};
   var defaultTile = {index: -20
                     ,randI: -12.43
                     ,pos: {ctor: "_Tuple2",_0: 0,_1: 0}
                     ,originPos: {ctor: "_Tuple2",_0: 34,_1: 23}
                     ,color: $Color.green
                     ,status: NotPlaced};
   var genTiles2 = F4(function (seed,_p9,c,pos) {
      var _p10 = _p9;
      var nTile = $List.length(c);
      var _p11 = A2(genRIndex,nTile,seed);
      var randList = _p11._0;
      var s = _p11._1;
      var tiles = A4($List.map3,
      F3(function (c,rI,i) {
         return {index: i,randI: rI,pos: {ctor: "_Tuple2",_0: 0,_1: 0},originPos: {ctor: "_Tuple2",_0: 0,_1: 0},color: c,status: NotPlaced};
      }),
      c,
      randList,
      _U.range(0,nTile - 1));
      var tiles1 = A2($List.sortBy,function (_) {    return _.randI;},tiles);
      var tiles2 = A4($List.map3,
      F3(function (pos,tile,i) {    return _U.update(tile,{randI: $Basics.toFloat(i),pos: pos,originPos: pos});}),
      pos,
      tiles1,
      _U.range(0,nTile - 1));
      return tiles2;
   });
   var genTiles = F2(function (seed,_p12) {
      var _p13 = _p12;
      var _p14 = $ColorInterpolation.genColor(seed);
      var c1 = _p14._0._0;
      var c2 = _p14._0._1;
      var rand = _p14._1;
      var colorList = A3($ColorInterpolation.interpList,$GlobalVars.numTiles,c1,c2);
      var _p15 = A2(genRIndex,$GlobalVars.numTiles,seed);
      var randList = _p15._0;
      var s = _p15._1;
      var xPos = A2($Spacing.spacingTile,{ctor: "_Tuple2",_0: _p13._0,_1: _p13._1},$GlobalVars.numTiles);
      var tiles = A5($List.map4,
      F4(function (c,rI,i,pos) {    return {index: i,randI: rI,pos: pos,originPos: pos,color: c,status: NotPlaced};}),
      colorList,
      randList,
      _U.range(0,$GlobalVars.numTiles - 1),
      xPos);
      var tiles1 = A2($List.sortBy,function (_) {    return _.randI;},tiles);
      var tiles2 = A2($List.indexedMap,F2(function (i,a) {    return _U.update(a,{randI: $Basics.toFloat(i)});}),tiles1);
      return tiles2;
   });
   var Placed = function (a) {    return {ctor: "Placed",_0: a};};
   var Drag = function (a) {    return {ctor: "Drag",_0: a};};
   var Selected = {ctor: "Selected"};
   var Rest = {ctor: "Rest"};
   var tileMailbox = $Signal.mailbox({ctor: "_Tuple2",_0: 4,_1: Rest});
   var tileImage = F2(function (_p17,_p16) {
      var _p18 = _p17;
      var _p23 = _p18._0;
      var _p22 = _p18._1;
      var _p19 = _p16;
      var _p21 = _p19.pos;
      var _p20 = _p19.index;
      var posX = $Basics.fst(_p21);
      var posY = $Basics.snd(_p21);
      var posX$ = _U.cmp(posX,_p23 - 100) > 0 ? _p23 - 100 : posX;
      var posY$ = _U.cmp(posY,_p22 - 100) > 0 ? _p22 - 100 : posY;
      var c$ = $Color.toRgb(_p19.color);
      var color$ = A2($Basics._op["++"],
      "rgb(",
      A2($Basics._op["++"],
      $Basics.toString(c$.red),
      A2($Basics._op["++"],
      ",",
      A2($Basics._op["++"],$Basics.toString(c$.green),A2($Basics._op["++"],",",A2($Basics._op["++"],$Basics.toString(c$.blue),")"))))));
      var str = A2($Basics._op["++"],
      "i: ",
      A2($Basics._op["++"],
      $Basics.toString(_p20),
      A2($Basics._op["++"],", rI: ",A2($Basics._op["++"],$Basics.toString(_p19.randI),A2($Basics._op["++"],", st: ",$Basics.toString(_p19.status))))));
      return A2($Svg.rect,
      _U.list([$Svg$Attributes.x($Basics.toString(posX$))
              ,$Svg$Attributes.y($Basics.toString(posY$))
              ,$Svg$Attributes.rx("4")
              ,$Svg$Attributes.ry("4")
              ,$Svg$Attributes.width($Basics.toString($GlobalVars.tileSideLen))
              ,$Svg$Attributes.height($Basics.toString($GlobalVars.tileSideLen))
              ,$Svg$Attributes.fill(color$)
              ,$Svg$Events.onMouseUp(A2($Signal.message,tileMailbox.address,{ctor: "_Tuple2",_0: _p20,_1: Rest}))
              ,$Svg$Events.onMouseDown(A2($Signal.message,tileMailbox.address,{ctor: "_Tuple2",_0: _p20,_1: Selected}))]),
      _U.list([$Html.text(str)]));
   });
   return _elm.BlendokuTiles.values = {_op: _op
                                      ,Rest: Rest
                                      ,Selected: Selected
                                      ,Drag: Drag
                                      ,Placed: Placed
                                      ,NotPlaced: NotPlaced
                                      ,Set: Set
                                      ,Tile: Tile
                                      ,tileMailbox: tileMailbox
                                      ,isSet: isSet
                                      ,isSet2: isSet2
                                      ,defaultTile: defaultTile
                                      ,makeTile: makeTile
                                      ,tileImage: tileImage
                                      ,getTile: getTile
                                      ,updateTiles: updateTiles
                                      ,genRIndex: genRIndex
                                      ,genTiles2: genTiles2
                                      ,genTiles: genTiles};
};