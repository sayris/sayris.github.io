Elm.Spacing = Elm.Spacing || {};
Elm.Spacing.make = function (_elm) {
   "use strict";
   _elm.Spacing = _elm.Spacing || {};
   if (_elm.Spacing.values) return _elm.Spacing.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Array = Elm.Array.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $GlobalVars = Elm.GlobalVars.make(_elm),
   $List = Elm.List.make(_elm),
   $Matrix = Elm.Matrix.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var _op = {};
   var tileOffset = function (gap) {    return $GlobalVars.tileSideLen + 2 * gap;};
   var calcOffset = F3(function (num,offset,midpoint) {
      var mid = num / 2 | 0;
      var before = _U.range(0,mid);
      var after = _U.range(mid + 1,num - 1);
      var forward = A2($List.map,function (i) {    return midpoint + offset * i;},before);
      var back = A2($List.map,function (i) {    return midpoint - offset * i;},after);
      var back$ = $List.reverse(back);
      return A2($List.append,forward,back$);
   });
   var spcMid = F3(function (numTiles,gap,midPoint) {
      var spaces = A3(calcOffset,numTiles,tileOffset(gap),midPoint);
      return $Array.fromList(A2($List.take,numTiles,spaces));
   });
   var bEq2 = F3(function (i,gap,offset) {    return offset - (gap * i + $GlobalVars.tileSideLen * i);});
   var fEq2 = F3(function (i,gap,offset) {    return gap * i + $GlobalVars.tileSideLen * i + offset;});
   var bEq = F3(function (i,gap,offset) {    return offset - (gap * (2 + i) + $GlobalVars.tileSideLen * i);});
   var fEq = F3(function (i,gap,offset) {    return gap * (1 + i) + $GlobalVars.tileSideLen * i + offset;});
   var spacing = F5(function (_p0,numTiles,y,gap,isTile) {
      var _p1 = _p0;
      var midPoint = _p1._0 / 2 | 0;
      var midTile = numTiles / 2 | 0;
      var latterPos = A2($List.map,function (i) {    return {ctor: "_Tuple2",_0: A3(fEq,i,gap,midPoint),_1: y};},_U.range(0,midTile));
      var firstPos = A2($List.map,function (i) {    return {ctor: "_Tuple2",_0: A3(bEq,i,gap,midPoint),_1: y};},_U.range(0,midTile - 1));
      var firstPos$ = isTile ? firstPos : $List.reverse(firstPos);
      var spaces = A2($List.append,firstPos$,latterPos);
      return A2($List.take,numTiles,spaces);
   });
   var spacingBoard = F2(function (_p2,numTiles) {
      var _p3 = _p2;
      return A5(spacing,{ctor: "_Tuple2",_0: _p3._0,_1: _p3._1},numTiles,250,$GlobalVars.tileSideLen / 2 | 0,false);
   });
   var spacingTile = F2(function (_p4,numTiles) {    var _p5 = _p4;return A5(spacing,{ctor: "_Tuple2",_0: _p5._0,_1: _p5._1},numTiles,10,10,true);});
   var spc = F3(function (numTiles,gap,offset) {
      var eq = function (i) {    return A3(fEq,i,gap,offset);};
      var tmp = A2($List.map,eq,_U.range(0,numTiles - 1));
      return $Array.fromList(tmp);
   });
   var newSpaceTiles = F3(function (_p6,numTiles,colWidth) {
      var _p7 = _p6;
      var rows = $Basics.ceiling($Basics.toFloat(numTiles) / $Basics.toFloat(colWidth));
      var rows$ = A2($Basics.max,1,rows);
      var tilesPerRow = $Basics.ceiling($Basics.toFloat(numTiles) / $Basics.toFloat(rows$));
      var gap = 5;
      var offsetX = _p7._0 / 3 | 0;
      var offsetY = 0;
      var spX = A3(spc,colWidth,gap,offsetX);
      var spY = A3(spc,rows$,gap,offsetY);
      var c0 = $GlobalVars.justWrap(A2($Array.get,0,spX));
      var col0 = A2($List.map,
      function (i) {
         return _U.list([{ctor: "_Tuple2",_0: c0,_1: $GlobalVars.justWrap(A2($Array.get,i,spY))}]);
      },
      _U.range(0,rows$ - 1));
      var rows = A2($List.indexedMap,
      F2(function (i,ts) {
         return A2($List.append,
         ts,
         A2($List.map,
         function (d) {
            return {ctor: "_Tuple2",_0: $GlobalVars.justWrap(A2($Array.get,d,spX)),_1: $GlobalVars.justWrap(A2($Array.get,i,spY))};
         },
         _U.range(1,tilesPerRow - 1)));
      }),
      col0);
      return A2($List.take,numTiles,$Matrix.flatten($Matrix.fromList(rows)));
   });
   return _elm.Spacing.values = {_op: _op
                                ,fEq: fEq
                                ,bEq: bEq
                                ,fEq2: fEq2
                                ,bEq2: bEq2
                                ,spacing: spacing
                                ,spacingBoard: spacingBoard
                                ,spacingTile: spacingTile
                                ,spc: spc
                                ,calcOffset: calcOffset
                                ,tileOffset: tileOffset
                                ,spcMid: spcMid
                                ,newSpaceTiles: newSpaceTiles};
};