Elm.Matrix = Elm.Matrix || {};
Elm.Matrix.Random = Elm.Matrix.Random || {};
Elm.Matrix.Random.make = function (_elm) {
   "use strict";
   _elm.Matrix = _elm.Matrix || {};
   _elm.Matrix.Random = _elm.Matrix.Random || {};
   if (_elm.Matrix.Random.values) return _elm.Matrix.Random.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Array = Elm.Array.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $List = Elm.List.make(_elm),
   $Matrix = Elm.Matrix.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Random = Elm.Random.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var _op = {};
   var matrixUsing = F3(function (widthGenerator,heightGenerator,f) {
      return A3($Random.map2,F2(function (width,height) {    return A3($Matrix.matrix,width,height,f);}),widthGenerator,heightGenerator);
   });
   var matrix = F3(function (widthGenerator,heightGenerator,elementGenerator) {
      return A2($Random.andThen,
      widthGenerator,
      function (width) {
         return A2($Random.andThen,
         heightGenerator,
         function (height) {
            var rowGenerator = A2($Random.map,$Array.fromList,A2($Random.list,width,elementGenerator));
            var matrixAsArrayGenerator = A2($Random.map,$Array.fromList,A2($Random.list,height,rowGenerator));
            return matrixAsArrayGenerator;
         });
      });
   });
   return _elm.Matrix.Random.values = {_op: _op,matrix: matrix,matrixUsing: matrixUsing};
};